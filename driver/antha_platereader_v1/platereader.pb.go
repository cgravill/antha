// Code generated by protoc-gen-go.
// source: github.com/antha-lang/antha/driver/antha_platereader_v1/platereader.proto
// DO NOT EDIT!

/*
Package antha_platereader_v1 is a generated protocol buffer package.

It is generated from these files:
	github.com/antha-lang/antha/driver/antha_platereader_v1/platereader.proto

It has these top-level messages:
	ProtocolRunRequest
	BoolReply
*/
package antha_platereader_v1

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.ProtoPackageIsVersion1

type ProtocolRunRequest struct {
	ProtocolName    string `protobuf:"bytes,1,opt,name=ProtocolName" json:"ProtocolName,omitempty"`
	PlateID         string `protobuf:"bytes,2,opt,name=PlateID" json:"PlateID,omitempty"`
	PlateLayout     string `protobuf:"bytes,3,opt,name=PlateLayout" json:"PlateLayout,omitempty"`
	ProtocolOptions string `protobuf:"bytes,4,opt,name=ProtocolOptions" json:"ProtocolOptions,omitempty"`
}

func (m *ProtocolRunRequest) Reset()                    { *m = ProtocolRunRequest{} }
func (m *ProtocolRunRequest) String() string            { return proto.CompactTextString(m) }
func (*ProtocolRunRequest) ProtoMessage()               {}
func (*ProtocolRunRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type BoolReply struct {
	Result bool `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
}

func (m *BoolReply) Reset()                    { *m = BoolReply{} }
func (m *BoolReply) String() string            { return proto.CompactTextString(m) }
func (*BoolReply) ProtoMessage()               {}
func (*BoolReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func init() {
	proto.RegisterType((*ProtocolRunRequest)(nil), "antha.platereader.v1.ProtocolRunRequest")
	proto.RegisterType((*BoolReply)(nil), "antha.platereader.v1.BoolReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Client API for PlateReader service

type PlateReaderClient interface {
	PRRunProtocolByName(ctx context.Context, in *ProtocolRunRequest, opts ...grpc.CallOption) (*BoolReply, error)
}

type plateReaderClient struct {
	cc *grpc.ClientConn
}

func NewPlateReaderClient(cc *grpc.ClientConn) PlateReaderClient {
	return &plateReaderClient{cc}
}

func (c *plateReaderClient) PRRunProtocolByName(ctx context.Context, in *ProtocolRunRequest, opts ...grpc.CallOption) (*BoolReply, error) {
	out := new(BoolReply)
	err := grpc.Invoke(ctx, "/antha.platereader.v1.PlateReader/PRRunProtocolByName", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PlateReader service

type PlateReaderServer interface {
	PRRunProtocolByName(context.Context, *ProtocolRunRequest) (*BoolReply, error)
}

func RegisterPlateReaderServer(s *grpc.Server, srv PlateReaderServer) {
	s.RegisterService(&_PlateReader_serviceDesc, srv)
}

func _PlateReader_PRRunProtocolByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(ProtocolRunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(PlateReaderServer).PRRunProtocolByName(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _PlateReader_serviceDesc = grpc.ServiceDesc{
	ServiceName: "antha.platereader.v1.PlateReader",
	HandlerType: (*PlateReaderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PRRunProtocolByName",
			Handler:    _PlateReader_PRRunProtocolByName_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

var fileDescriptor0 = []byte{
	// 259 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x6c, 0x90, 0xd1, 0x4a, 0xc3, 0x30,
	0x14, 0x86, 0x9d, 0xca, 0xe6, 0xce, 0x06, 0x83, 0x28, 0x12, 0xbc, 0x71, 0xd4, 0x9b, 0xde, 0x98,
	0x32, 0x7d, 0x83, 0xe1, 0xcd, 0x40, 0xb4, 0xe4, 0x05, 0x46, 0xba, 0x1d, 0xb6, 0x42, 0xd6, 0x64,
	0x69, 0x52, 0xe8, 0xcb, 0xf8, 0xac, 0x6e, 0xa7, 0xab, 0x56, 0xdc, 0x5d, 0xfe, 0xff, 0x3f, 0x9c,
	0xf3, 0xfd, 0x81, 0xc5, 0x26, 0xf7, 0xdb, 0x90, 0x89, 0x95, 0xd9, 0x25, 0xaa, 0xf0, 0x5b, 0xf5,
	0xac, 0x55, 0xb1, 0x69, 0x9e, 0xc9, 0xda, 0xe5, 0x15, 0xba, 0x46, 0x2c, 0xad, 0x56, 0x1e, 0x1d,
	0xaa, 0x35, 0xba, 0x65, 0x35, 0x4b, 0x3a, 0x52, 0x58, 0x67, 0xbc, 0x61, 0x77, 0x34, 0x27, 0xba,
	0x41, 0x35, 0x8b, 0xbe, 0x7a, 0xc0, 0xd2, 0x63, 0xbe, 0x32, 0x5a, 0x86, 0x42, 0xe2, 0x3e, 0x60,
	0xe9, 0x59, 0x04, 0xe3, 0xd6, 0xfd, 0x50, 0x3b, 0xe4, 0xbd, 0x69, 0x2f, 0x1e, 0xca, 0xb1, 0xed,
	0x78, 0x8c, 0xc3, 0x20, 0x3d, 0x2e, 0x5b, 0xbc, 0xf1, 0x4b, 0x8a, 0x07, 0xb6, 0x91, 0x6c, 0x0a,
	0x23, 0x4a, 0xde, 0x55, 0x6d, 0x82, 0xe7, 0x57, 0x94, 0x8e, 0xec, 0xaf, 0xc5, 0x62, 0x98, 0xb4,
	0xfb, 0x3f, 0xad, 0xcf, 0x4d, 0x51, 0xf2, 0x6b, 0x9a, 0x9a, 0xd8, 0xbf, 0x76, 0xf4, 0x04, 0xc3,
	0xb9, 0x39, 0xb0, 0xa1, 0xd5, 0x35, 0xbb, 0x87, 0xbe, 0xc3, 0x32, 0x68, 0x4f, 0x40, 0x37, 0xf2,
	0xa4, 0x5e, 0xf6, 0xa7, 0x83, 0x92, 0x7a, 0xb1, 0x0c, 0x6e, 0x53, 0x79, 0x68, 0xd3, 0x9e, 0x98,
	0xd7, 0x04, 0x1c, 0x8b, 0x73, 0x5f, 0x20, 0xfe, 0xd7, 0x7f, 0x78, 0x3c, 0x3f, 0xf9, 0x03, 0x12,
	0x5d, 0x64, 0x7d, 0x02, 0x7d, 0xfd, 0x0e, 0x00, 0x00, 0xff, 0xff, 0x34, 0xbc, 0xa0, 0x59, 0xa2,
	0x01, 0x00, 0x00,
}
